// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, passwordHash)
VALUES ($1, $2, $3)
RETURNING id, role, username, email, passwordhash
`

type CreateUserParams struct {
	Username     string
	Email        string
	Passwordhash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.Passwordhash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :one
DELETE FROM transactions
WHERE id = $1
RETURNING id, sourceid, uploadsource, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, ownerid, accountid
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, deleteTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, role, username, email, passwordhash
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one

SELECT id, sourceid, uploadsource, type, name, routingnumber, updated, ownerid FROM accounts
WHERE id = $1 and ownerId = $2
LIMIT 1
`

type GetAccountParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
}

// ACCOUNTS
func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.ID, arg.Ownerid)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Type,
		&i.Name,
		&i.Routingnumber,
		&i.Updated,
		&i.Ownerid,
	)
	return i, err
}

const getTotalIncome = `-- name: GetTotalIncome :one
SELECT SUM(amount) FROM transactions
WHERE ownerId = $1 AND amount < 0
`

func (q *Queries) GetTotalIncome(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalIncome, ownerid)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getTotalSpending = `-- name: GetTotalSpending :one

SELECT SUM(amount) FROM transactions
WHERE ownerId = $1 AND amount > 0
`

// STATS
func (q *Queries) GetTotalSpending(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalSpending, ownerid)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getTransaction = `-- name: GetTransaction :one

SELECT id, sourceid, uploadsource, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, ownerid, accountid FROM transactions
WHERE id = $1 and ownerId = $2
LIMIT 1
`

type GetTransactionParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
}

// TRANSACTIONS
func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, arg.ID, arg.Ownerid)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, role, username, email, passwordhash FROM users
WHERE id = $1
`

// USERS
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, role, username, email, passwordhash FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, sourceid, uploadsource, type, name, routingnumber, updated, ownerid FROM accounts
WHERE ownerId = $1
`

func (q *Queries) ListAccounts(ctx context.Context, ownerid uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, ownerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Uploadsource,
			&i.Type,
			&i.Name,
			&i.Routingnumber,
			&i.Updated,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, sourceid, uploadsource, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, ownerid, accountid FROM transactions
WHERE ownerId = $1
`

func (q *Queries) ListTransactions(ctx context.Context, ownerid uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, ownerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Uploadsource,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, role, username, email, passwordhash FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Username,
			&i.Email,
			&i.Passwordhash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET amount = $3
WHERE id = $1 AND ownerId = $2
RETURNING id, sourceid, uploadsource, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, ownerid, accountid
`

type UpdateTransactionParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
	Amount  int32
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction, arg.ID, arg.Ownerid, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, email = $3
WHERE id = $1
RETURNING id, role, username, email, passwordhash
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const upsertAccount = `-- name: UpsertAccount :one
INSERT INTO accounts (
    sourceId,
    uploadSource,
    type,
    name,
    routingNumber,
    updated,
    ownerId
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (sourceId) DO UPDATE
SET
    type = $3,
    name = $4,
    routingNumber = $5,
    updated = $6
RETURNING id, sourceid, uploadsource, type, name, routingnumber, updated, ownerid
`

type UpsertAccountParams struct {
	Sourceid      string
	Uploadsource  UploadSource
	Type          AccountType
	Name          string
	Routingnumber sql.NullString
	Updated       time.Time
	Ownerid       uuid.UUID
}

// WHERE ownerId = $7
func (q *Queries) UpsertAccount(ctx context.Context, arg UpsertAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, upsertAccount,
		arg.Sourceid,
		arg.Uploadsource,
		arg.Type,
		arg.Name,
		arg.Routingnumber,
		arg.Updated,
		arg.Ownerid,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Type,
		&i.Name,
		&i.Routingnumber,
		&i.Updated,
		&i.Ownerid,
	)
	return i, err
}

const upsertTransaction = `-- name: UpsertTransaction :one
INSERT INTO transactions (
    sourceId,
    uploadSource,
    amount,
    payeeId,
    payee,
    payeeFull,
    isoCurrencyCode,
    date,
    description,
    type,
    checkNumber,
    updated,
    ownerId,
    accountId
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
ON CONFLICT (sourceId) DO UPDATE
SET
    amount = $3,
    payeeId = $4,
    payee = $5,
    payeeFull = $6,
    isoCurrencyCode = $7,
    date = $8,
    description = $9,
    type = $10,
    checkNumber = $11,
    updated = $12
RETURNING id, sourceid, uploadsource, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, ownerid, accountid
`

type UpsertTransactionParams struct {
	Sourceid        string
	Uploadsource    UploadSource
	Amount          int32
	Payeeid         sql.NullString
	Payee           sql.NullString
	Payeefull       sql.NullString
	Isocurrencycode string
	Date            time.Time
	Description     string
	Type            TransactionType
	Checknumber     sql.NullString
	Updated         time.Time
	Ownerid         uuid.UUID
	Accountid       uuid.UUID
}

// WHERE ownerId = $13
func (q *Queries) UpsertTransaction(ctx context.Context, arg UpsertTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, upsertTransaction,
		arg.Sourceid,
		arg.Uploadsource,
		arg.Amount,
		arg.Payeeid,
		arg.Payee,
		arg.Payeefull,
		arg.Isocurrencycode,
		arg.Date,
		arg.Description,
		arg.Type,
		arg.Checknumber,
		arg.Updated,
		arg.Ownerid,
		arg.Accountid,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Uploadsource,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}
