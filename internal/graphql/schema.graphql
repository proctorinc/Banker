scalar Date
scalar Upload

directive @isAuthenticated on FIELD_DEFINITION
directive @isAdmin on FIELD_DEFINITION

type User {
    id: ID!
    role: String!
    username: String!
    email: String!
    transactions: [Transaction!]!
    accounts: [Account!]!
    merchants: [Merchant!]!
}

type Account {
    id: ID!
    sourceId: String!
    uploadSource: String!
    type: String!
    name: String!
    routingNumber: String
    stats(input: StatsInput): StatsResponse! @isAuthenticated
    transactions: [Transaction!]!
}

type Transaction {
    id: ID!
    sourceId: String!
    uploadSource: String!
    amount: Float!
    payeeId: String
    payee: String
    payeeFull: String
    isoCurrencyCode: String!
    date: Date!
    description: String!
    type: String!
    checkNumber: String
    updated: Date!
    merchant: Merchant!
}

type Merchant {
    id: ID!
    name: String!
    sourceId: String
    ownerId: ID!
    transactions: [Transaction!]!
}

type Query {
    user(id: ID!): User @isAdmin
    users: [User!]! @isAdmin
    me: User @isAuthenticated
    account(id: ID!): Account @isAuthenticated
    accounts: [Account!]! @isAuthenticated
    transaction(id: ID!): Transaction @isAuthenticated
    transactions: [Transaction!]! @isAuthenticated
    merchant(id: ID!): Merchant @isAuthenticated
    merchants: [Merchant!]! @isAuthenticated
    stats(input: StatsInput): StatsResponse! @isAuthenticated
}

type Mutation {
    register(data: RegisterInput!): User!
    login(data: LoginInput!): User
    logout: String! @isAuthenticated
    deleteUser: User! @isAuthenticated
    deleteTransaction(id: ID!): Transaction! @isAuthenticated
    chaseOFXUpload(file: Upload!): UploadResponse! @isAuthenticated
}

type UploadResponse {
    success: Boolean!
    accounts: UploadStats!
    transactions: UploadStats!
}

type UploadStats {
    updated: Int!
    failed: Int!
}

type StatsResponse {
    spending: SpendingStats
    income: IncomeStats
    net: NetStats
}

type SpendingStats {
    total: Float!
    transactions: [Transaction!]!
}

type IncomeStats {
    total: Float!
    transactions: [Transaction!]!
}

type NetStats {
    total: Float!
}

input StatsInput {
    startDate: Date!
    endDate: Date!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    username: String!
    email: String!
    password: String!
}
